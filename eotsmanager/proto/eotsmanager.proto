syntax = "proto3";

package proto;

option go_package = "github.com/babylonlabs-io/finality-provider/eotsmanager/proto";

service EOTSManager {
  rpc Ping (PingRequest) returns (PingResponse);

  // CreateRandomnessPairList returns a list of Schnorr randomness pairs
  rpc CreateRandomnessPairList (CreateRandomnessPairListRequest)
      returns (CreateRandomnessPairListResponse);

  // SignEOTS signs an EOTS with the EOTS private key and the relevant randomness
  rpc SignEOTS (SignEOTSRequest)
      returns (SignEOTSResponse);

  // SignEOTSBoth signs an EOTS with the EOTS private key and the relevant randomness
	// this is for backward compatibility, will be deprecated soon
  rpc SignEOTSBoth (SignEOTSBothRequest)
      returns (SignEOTSBothResponse);

  // UnsafeSignEOTS used only for testing purpose. Use SignEOTS for real operations
  rpc UnsafeSignEOTS (SignEOTSRequest)
      returns (SignEOTSResponse);

  // SignSchnorrSig signs a Schnorr sig with the EOTS private key
  rpc SignSchnorrSig (SignSchnorrSigRequest)
      returns (SignSchnorrSigResponse);

  // SaveEOTSKeyName saves a new key name mapping for the EOTS public key
  rpc SaveEOTSKeyName (SaveEOTSKeyNameRequest)
      returns (SaveEOTSKeyNameResponse);
}

message PingRequest {}

message PingResponse {}

message CreateKeyRequest {
  // name is the identifier key in keyring
  string name = 1;
  // hd_path is the hd path for private key derivation
  string hd_path = 2;
}

message CreateKeyResponse {
  // pk is the EOTS public key following BIP-340 spec
  bytes pk = 1;
}

message CreateRandomnessPairListRequest {
  // uid is the identifier of an EOTS key, i.e., public key following BIP-340 spec
  bytes uid = 1;
  // chain_id is the identifier of the consumer chain that the randomness is committed to
  bytes chain_id = 2;
  // start_height is the start height of the randomness pair list
  uint64 start_height = 3;
  // num is the number of randomness pair list
  uint32 num = 4;
}

message CreateRandomnessPairListResponse {
  // pub_rand_list is a list of Schnorr public randomness
  repeated bytes pub_rand_list = 1;
}

message SignEOTSRequest {
  // uid is the identifier of an EOTS key, i.e., public key following BIP-340 spec
  bytes uid = 1;
  // chain_id is the identifier of the consumer chain that the randomness is committed to
  bytes chain_id = 2;
  // the message which the EOTS signs
  bytes msg = 3;
  // the block height which the EOTS signs
  uint64 height = 4;
}

message SignEOTSResponse {
  // sig is the EOTS signature
  bytes sig = 1;
}

message SignEOTSBothRequest {
  // uid is the identifier of an EOTS key, i.e., public key following BIP-340 spec
  bytes uid = 1;
  // chain_id is the identifier of the consumer chain that the randomness is committed to
  bytes chain_id = 2;
  // the message which the EOTS signs
  bytes msg = 3;
  // the block height which the EOTS signs
  uint64 height = 4;
}

message SignEOTSBothResponse {
  // sig is the EOTS signature
  bytes sig = 1;
  // pub_rand is the EOTS public randomness
  bytes pub_rand = 2;
  // sig_legacy is the EOTS signature signed using pub_rand_legacy
  bytes sig_legacy = 3;
  // pub_rand_legacy is the EOTS public randomness generated
  // by legacy rand generator
  bytes pub_rand_legacy = 4;
}

message SignSchnorrSigRequest {
  // uid is the identifier of an EOTS key, i.e., public key following BIP-340 spec
  bytes uid = 1;
  // the message which the Schnorr signature signs
  bytes msg = 2;
}

message SignSchnorrSigResponse {
  // sig is the Schnorr signature
  bytes sig = 1;
}

message SaveEOTSKeyNameRequest {
  // KeyName is the name of the key which corresponds to the
  // BIP340 public key
  string key_name = 1;
  // EotsPK is the public key of the EOTS key BIP340PubKey
  bytes eots_pk = 2;
}

message SaveEOTSKeyNameResponse {}
