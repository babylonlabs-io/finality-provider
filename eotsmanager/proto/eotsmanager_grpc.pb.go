// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EOTSManagerClient is the client API for EOTSManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EOTSManagerClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// CreateRandomnessPairList returns a list of Schnorr randomness pairs
	CreateRandomnessPairList(ctx context.Context, in *CreateRandomnessPairListRequest, opts ...grpc.CallOption) (*CreateRandomnessPairListResponse, error)
	// SignEOTS signs an EOTS with the EOTS private key and the relevant randomness
	SignEOTS(ctx context.Context, in *SignEOTSRequest, opts ...grpc.CallOption) (*SignEOTSResponse, error)
	// UnsafeSignEOTS used only for testing purpose. Use SignEOTS for real operations
	UnsafeSignEOTS(ctx context.Context, in *SignEOTSRequest, opts ...grpc.CallOption) (*SignEOTSResponse, error)
	// SignSchnorrSig signs a Schnorr sig with the EOTS private key
	SignSchnorrSig(ctx context.Context, in *SignSchnorrSigRequest, opts ...grpc.CallOption) (*SignSchnorrSigResponse, error)
	// SaveEOTSKeyName saves a new key name mapping for the EOTS public key
	SaveEOTSKeyName(ctx context.Context, in *SaveEOTSKeyNameRequest, opts ...grpc.CallOption) (*SaveEOTSKeyNameResponse, error)
	// UnlockKey unlocks the keyring with the given passphrase
	UnlockKey(ctx context.Context, in *UnlockKeyRequest, opts ...grpc.CallOption) (*UnlockKeyResponse, error)
	// CreateRandomnessPairListWithInterval returns a list of Schnorr randomness pairs
	// with a specified interval between heights
	CreateRandomnessPairListWithInterval(ctx context.Context, in *CreateRandomnessPairListWithIntervalRequest, opts ...grpc.CallOption) (*CreateRandomnessPairListWithIntervalResponse, error)
	// Backup - etosd db
	Backup(ctx context.Context, in *BackupRequest, opts ...grpc.CallOption) (*BackupResponse, error)
}

type eOTSManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewEOTSManagerClient(cc grpc.ClientConnInterface) EOTSManagerClient {
	return &eOTSManagerClient{cc}
}

func (c *eOTSManagerClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/proto.EOTSManager/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eOTSManagerClient) CreateRandomnessPairList(ctx context.Context, in *CreateRandomnessPairListRequest, opts ...grpc.CallOption) (*CreateRandomnessPairListResponse, error) {
	out := new(CreateRandomnessPairListResponse)
	err := c.cc.Invoke(ctx, "/proto.EOTSManager/CreateRandomnessPairList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eOTSManagerClient) SignEOTS(ctx context.Context, in *SignEOTSRequest, opts ...grpc.CallOption) (*SignEOTSResponse, error) {
	out := new(SignEOTSResponse)
	err := c.cc.Invoke(ctx, "/proto.EOTSManager/SignEOTS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eOTSManagerClient) UnsafeSignEOTS(ctx context.Context, in *SignEOTSRequest, opts ...grpc.CallOption) (*SignEOTSResponse, error) {
	out := new(SignEOTSResponse)
	err := c.cc.Invoke(ctx, "/proto.EOTSManager/UnsafeSignEOTS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eOTSManagerClient) SignSchnorrSig(ctx context.Context, in *SignSchnorrSigRequest, opts ...grpc.CallOption) (*SignSchnorrSigResponse, error) {
	out := new(SignSchnorrSigResponse)
	err := c.cc.Invoke(ctx, "/proto.EOTSManager/SignSchnorrSig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eOTSManagerClient) SaveEOTSKeyName(ctx context.Context, in *SaveEOTSKeyNameRequest, opts ...grpc.CallOption) (*SaveEOTSKeyNameResponse, error) {
	out := new(SaveEOTSKeyNameResponse)
	err := c.cc.Invoke(ctx, "/proto.EOTSManager/SaveEOTSKeyName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eOTSManagerClient) UnlockKey(ctx context.Context, in *UnlockKeyRequest, opts ...grpc.CallOption) (*UnlockKeyResponse, error) {
	out := new(UnlockKeyResponse)
	err := c.cc.Invoke(ctx, "/proto.EOTSManager/UnlockKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eOTSManagerClient) CreateRandomnessPairListWithInterval(ctx context.Context, in *CreateRandomnessPairListWithIntervalRequest, opts ...grpc.CallOption) (*CreateRandomnessPairListWithIntervalResponse, error) {
	out := new(CreateRandomnessPairListWithIntervalResponse)
	err := c.cc.Invoke(ctx, "/proto.EOTSManager/CreateRandomnessPairListWithInterval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eOTSManagerClient) Backup(ctx context.Context, in *BackupRequest, opts ...grpc.CallOption) (*BackupResponse, error) {
	out := new(BackupResponse)
	err := c.cc.Invoke(ctx, "/proto.EOTSManager/Backup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EOTSManagerServer is the server API for EOTSManager service.
// All implementations must embed UnimplementedEOTSManagerServer
// for forward compatibility
type EOTSManagerServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// CreateRandomnessPairList returns a list of Schnorr randomness pairs
	CreateRandomnessPairList(context.Context, *CreateRandomnessPairListRequest) (*CreateRandomnessPairListResponse, error)
	// SignEOTS signs an EOTS with the EOTS private key and the relevant randomness
	SignEOTS(context.Context, *SignEOTSRequest) (*SignEOTSResponse, error)
	// UnsafeSignEOTS used only for testing purpose. Use SignEOTS for real operations
	UnsafeSignEOTS(context.Context, *SignEOTSRequest) (*SignEOTSResponse, error)
	// SignSchnorrSig signs a Schnorr sig with the EOTS private key
	SignSchnorrSig(context.Context, *SignSchnorrSigRequest) (*SignSchnorrSigResponse, error)
	// SaveEOTSKeyName saves a new key name mapping for the EOTS public key
	SaveEOTSKeyName(context.Context, *SaveEOTSKeyNameRequest) (*SaveEOTSKeyNameResponse, error)
	// UnlockKey unlocks the keyring with the given passphrase
	UnlockKey(context.Context, *UnlockKeyRequest) (*UnlockKeyResponse, error)
	// CreateRandomnessPairListWithInterval returns a list of Schnorr randomness pairs
	// with a specified interval between heights
	CreateRandomnessPairListWithInterval(context.Context, *CreateRandomnessPairListWithIntervalRequest) (*CreateRandomnessPairListWithIntervalResponse, error)
	// Backup - etosd db
	Backup(context.Context, *BackupRequest) (*BackupResponse, error)
	mustEmbedUnimplementedEOTSManagerServer()
}

// UnimplementedEOTSManagerServer must be embedded to have forward compatible implementations.
type UnimplementedEOTSManagerServer struct {
}

func (UnimplementedEOTSManagerServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedEOTSManagerServer) CreateRandomnessPairList(context.Context, *CreateRandomnessPairListRequest) (*CreateRandomnessPairListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRandomnessPairList not implemented")
}
func (UnimplementedEOTSManagerServer) SignEOTS(context.Context, *SignEOTSRequest) (*SignEOTSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignEOTS not implemented")
}
func (UnimplementedEOTSManagerServer) UnsafeSignEOTS(context.Context, *SignEOTSRequest) (*SignEOTSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsafeSignEOTS not implemented")
}
func (UnimplementedEOTSManagerServer) SignSchnorrSig(context.Context, *SignSchnorrSigRequest) (*SignSchnorrSigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignSchnorrSig not implemented")
}
func (UnimplementedEOTSManagerServer) SaveEOTSKeyName(context.Context, *SaveEOTSKeyNameRequest) (*SaveEOTSKeyNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveEOTSKeyName not implemented")
}
func (UnimplementedEOTSManagerServer) UnlockKey(context.Context, *UnlockKeyRequest) (*UnlockKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockKey not implemented")
}
func (UnimplementedEOTSManagerServer) CreateRandomnessPairListWithInterval(context.Context, *CreateRandomnessPairListWithIntervalRequest) (*CreateRandomnessPairListWithIntervalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRandomnessPairListWithInterval not implemented")
}
func (UnimplementedEOTSManagerServer) Backup(context.Context, *BackupRequest) (*BackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Backup not implemented")
}
func (UnimplementedEOTSManagerServer) mustEmbedUnimplementedEOTSManagerServer() {}

// UnsafeEOTSManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EOTSManagerServer will
// result in compilation errors.
type UnsafeEOTSManagerServer interface {
	mustEmbedUnimplementedEOTSManagerServer()
}

func RegisterEOTSManagerServer(s grpc.ServiceRegistrar, srv EOTSManagerServer) {
	s.RegisterService(&EOTSManager_ServiceDesc, srv)
}

func _EOTSManager_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EOTSManagerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EOTSManager/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EOTSManagerServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EOTSManager_CreateRandomnessPairList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRandomnessPairListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EOTSManagerServer).CreateRandomnessPairList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EOTSManager/CreateRandomnessPairList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EOTSManagerServer).CreateRandomnessPairList(ctx, req.(*CreateRandomnessPairListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EOTSManager_SignEOTS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignEOTSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EOTSManagerServer).SignEOTS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EOTSManager/SignEOTS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EOTSManagerServer).SignEOTS(ctx, req.(*SignEOTSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EOTSManager_UnsafeSignEOTS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignEOTSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EOTSManagerServer).UnsafeSignEOTS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EOTSManager/UnsafeSignEOTS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EOTSManagerServer).UnsafeSignEOTS(ctx, req.(*SignEOTSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EOTSManager_SignSchnorrSig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignSchnorrSigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EOTSManagerServer).SignSchnorrSig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EOTSManager/SignSchnorrSig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EOTSManagerServer).SignSchnorrSig(ctx, req.(*SignSchnorrSigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EOTSManager_SaveEOTSKeyName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveEOTSKeyNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EOTSManagerServer).SaveEOTSKeyName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EOTSManager/SaveEOTSKeyName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EOTSManagerServer).SaveEOTSKeyName(ctx, req.(*SaveEOTSKeyNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EOTSManager_UnlockKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EOTSManagerServer).UnlockKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EOTSManager/UnlockKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EOTSManagerServer).UnlockKey(ctx, req.(*UnlockKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EOTSManager_CreateRandomnessPairListWithInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRandomnessPairListWithIntervalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EOTSManagerServer).CreateRandomnessPairListWithInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EOTSManager/CreateRandomnessPairListWithInterval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EOTSManagerServer).CreateRandomnessPairListWithInterval(ctx, req.(*CreateRandomnessPairListWithIntervalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EOTSManager_Backup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EOTSManagerServer).Backup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EOTSManager/Backup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EOTSManagerServer).Backup(ctx, req.(*BackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EOTSManager_ServiceDesc is the grpc.ServiceDesc for EOTSManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EOTSManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.EOTSManager",
	HandlerType: (*EOTSManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _EOTSManager_Ping_Handler,
		},
		{
			MethodName: "CreateRandomnessPairList",
			Handler:    _EOTSManager_CreateRandomnessPairList_Handler,
		},
		{
			MethodName: "SignEOTS",
			Handler:    _EOTSManager_SignEOTS_Handler,
		},
		{
			MethodName: "UnsafeSignEOTS",
			Handler:    _EOTSManager_UnsafeSignEOTS_Handler,
		},
		{
			MethodName: "SignSchnorrSig",
			Handler:    _EOTSManager_SignSchnorrSig_Handler,
		},
		{
			MethodName: "SaveEOTSKeyName",
			Handler:    _EOTSManager_SaveEOTSKeyName_Handler,
		},
		{
			MethodName: "UnlockKey",
			Handler:    _EOTSManager_UnlockKey_Handler,
		},
		{
			MethodName: "CreateRandomnessPairListWithInterval",
			Handler:    _EOTSManager_CreateRandomnessPairListWithInterval_Handler,
		},
		{
			MethodName: "Backup",
			Handler:    _EOTSManager_Backup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eotsmanager.proto",
}
