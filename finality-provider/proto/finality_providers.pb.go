// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: finality_providers.proto

package proto

import (
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/x/staking/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// FinalityProviderStatus is the status of a finality provider
// a FinalityProvider object has 5 states:
//   - Registered - created and registered to the consumer chain, but not voting
//     yet (No delegated stake)
//   - Inactive - the finality provider does not have voting power to vote
//   - Active - the finality provider has voting power to vote
//     Finality Provider was already active.
//   - Slashed - the finality provider looses all the voting power forever due to
//     double voting
//   - Jailed - the finality provider temporarily looses the voting power due to
//     being sluggish
//
// Possible State Transactions:
//   - Registered -> Inactive
//   - Inactive   -> Active
//   - Active     -> Inactive
//   - Active     -> Slashed
//   - Active     -> Jailed
//   - Jailed     -> Active
//   - Jailed     -> Inactive
type FinalityProviderStatus int32

const (
	// REGISTERED defines a finality provider that has been registered
	// to the consumer chain but has no delegated stake
	FinalityProviderStatus_REGISTERED FinalityProviderStatus = 0
	// ACTIVE defines a finality provider that is delegated to vote
	FinalityProviderStatus_ACTIVE FinalityProviderStatus = 1
	// INACTIVE defines a finality provider whose delegations are reduced to
	// zero but not slashed
	FinalityProviderStatus_INACTIVE FinalityProviderStatus = 2
	// SLASHED defines a finality provider that has been slashed
	FinalityProviderStatus_SLASHED FinalityProviderStatus = 3
	// JAILED defines a finality provider that has been jailed
	FinalityProviderStatus_JAILED FinalityProviderStatus = 4
)

// Enum value maps for FinalityProviderStatus.
var (
	FinalityProviderStatus_name = map[int32]string{
		0: "REGISTERED",
		1: "ACTIVE",
		2: "INACTIVE",
		3: "SLASHED",
		4: "JAILED",
	}
	FinalityProviderStatus_value = map[string]int32{
		"REGISTERED": 0,
		"ACTIVE":     1,
		"INACTIVE":   2,
		"SLASHED":    3,
		"JAILED":     4,
	}
)

func (x FinalityProviderStatus) Enum() *FinalityProviderStatus {
	p := new(FinalityProviderStatus)
	*p = x
	return p
}

func (x FinalityProviderStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FinalityProviderStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_finality_providers_proto_enumTypes[0].Descriptor()
}

func (FinalityProviderStatus) Type() protoreflect.EnumType {
	return &file_finality_providers_proto_enumTypes[0]
}

func (x FinalityProviderStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FinalityProviderStatus.Descriptor instead.
func (FinalityProviderStatus) EnumDescriptor() ([]byte, []int) {
	return file_finality_providers_proto_rawDescGZIP(), []int{0}
}

type GetInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetInfoRequest) Reset() {
	*x = GetInfoRequest{}
	mi := &file_finality_providers_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoRequest) ProtoMessage() {}

func (x *GetInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_finality_providers_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoRequest.ProtoReflect.Descriptor instead.
func (*GetInfoRequest) Descriptor() ([]byte, []int) {
	return file_finality_providers_proto_rawDescGZIP(), []int{0}
}

type GetInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetInfoResponse) Reset() {
	*x = GetInfoResponse{}
	mi := &file_finality_providers_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoResponse) ProtoMessage() {}

func (x *GetInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_finality_providers_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoResponse.ProtoReflect.Descriptor instead.
func (*GetInfoResponse) Descriptor() ([]byte, []int) {
	return file_finality_providers_proto_rawDescGZIP(), []int{1}
}

func (x *GetInfoResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type CreateFinalityProviderRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// key_name is the identifier key in keyring
	KeyName string `protobuf:"bytes,1,opt,name=key_name,json=keyName,proto3" json:"key_name,omitempty"`
	// chain_id is the identifier of the consumer chain that the finality
	// provider is connected to
	ChainId string `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// description defines the description terms for the finality provider
	Description []byte `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// eots_pk_hex it is the optional EOTS public key and used to ask for
	// the key record from the EOTS manager for the corresponding EOTS public
	// key. If this property is not set, it will create a new EOTS key.
	EotsPkHex string `protobuf:"bytes,5,opt,name=eots_pk_hex,json=eotsPkHex,proto3" json:"eots_pk_hex,omitempty"`
	// commission defines the commission rate for the finality provider
	Commission    *CommissionRates `protobuf:"bytes,6,opt,name=commission,proto3" json:"commission,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateFinalityProviderRequest) Reset() {
	*x = CreateFinalityProviderRequest{}
	mi := &file_finality_providers_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFinalityProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFinalityProviderRequest) ProtoMessage() {}

func (x *CreateFinalityProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_finality_providers_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFinalityProviderRequest.ProtoReflect.Descriptor instead.
func (*CreateFinalityProviderRequest) Descriptor() ([]byte, []int) {
	return file_finality_providers_proto_rawDescGZIP(), []int{2}
}

func (x *CreateFinalityProviderRequest) GetKeyName() string {
	if x != nil {
		return x.KeyName
	}
	return ""
}

func (x *CreateFinalityProviderRequest) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *CreateFinalityProviderRequest) GetDescription() []byte {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *CreateFinalityProviderRequest) GetEotsPkHex() string {
	if x != nil {
		return x.EotsPkHex
	}
	return ""
}

func (x *CreateFinalityProviderRequest) GetCommission() *CommissionRates {
	if x != nil {
		return x.Commission
	}
	return nil
}

// CommissionRates defines the initial commission rates to be used for creating
// a finality provider.
type CommissionRates struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// rate is the commission rate charged to delegators, as a fraction.
	Rate string `protobuf:"bytes,1,opt,name=rate,proto3" json:"rate,omitempty"`
	// max_rate defines the maximum commission rate which finality provider can
	// ever charge, as a fraction.
	MaxRate string `protobuf:"bytes,2,opt,name=max_rate,json=maxRate,proto3" json:"max_rate,omitempty"`
	// max_change_rate defines the maximum daily increase of the finality
	// provider commission, as a fraction.
	MaxChangeRate string `protobuf:"bytes,3,opt,name=max_change_rate,json=maxChangeRate,proto3" json:"max_change_rate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommissionRates) Reset() {
	*x = CommissionRates{}
	mi := &file_finality_providers_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommissionRates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommissionRates) ProtoMessage() {}

func (x *CommissionRates) ProtoReflect() protoreflect.Message {
	mi := &file_finality_providers_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommissionRates.ProtoReflect.Descriptor instead.
func (*CommissionRates) Descriptor() ([]byte, []int) {
	return file_finality_providers_proto_rawDescGZIP(), []int{3}
}

func (x *CommissionRates) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

func (x *CommissionRates) GetMaxRate() string {
	if x != nil {
		return x.MaxRate
	}
	return ""
}

func (x *CommissionRates) GetMaxChangeRate() string {
	if x != nil {
		return x.MaxChangeRate
	}
	return ""
}

type CreateFinalityProviderResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	FinalityProvider *FinalityProviderInfo  `protobuf:"bytes,1,opt,name=finality_provider,json=finalityProvider,proto3" json:"finality_provider,omitempty"`
	// hash of the successful finality provider creation transaction
	TxHash        string `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateFinalityProviderResponse) Reset() {
	*x = CreateFinalityProviderResponse{}
	mi := &file_finality_providers_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFinalityProviderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFinalityProviderResponse) ProtoMessage() {}

func (x *CreateFinalityProviderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_finality_providers_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFinalityProviderResponse.ProtoReflect.Descriptor instead.
func (*CreateFinalityProviderResponse) Descriptor() ([]byte, []int) {
	return file_finality_providers_proto_rawDescGZIP(), []int{4}
}

func (x *CreateFinalityProviderResponse) GetFinalityProvider() *FinalityProviderInfo {
	if x != nil {
		return x.FinalityProvider
	}
	return nil
}

func (x *CreateFinalityProviderResponse) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

type AddFinalitySignatureRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// btc_pk is hex string of the BTC secp256k1 public key of the finality
	// provider encoded in BIP-340 spec
	BtcPk string `protobuf:"bytes,1,opt,name=btc_pk,json=btcPk,proto3" json:"btc_pk,omitempty"`
	// height is the height of the chain block
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	// app_hash is the AppHash of the chain block
	AppHash []byte `protobuf:"bytes,3,opt,name=app_hash,json=appHash,proto3" json:"app_hash,omitempty"`
	// check_double_sign use double sign protection when doing EOTS sign
	CheckDoubleSign bool `protobuf:"varint,4,opt,name=check_double_sign,json=checkDoubleSign,proto3" json:"check_double_sign,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AddFinalitySignatureRequest) Reset() {
	*x = AddFinalitySignatureRequest{}
	mi := &file_finality_providers_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddFinalitySignatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFinalitySignatureRequest) ProtoMessage() {}

func (x *AddFinalitySignatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_finality_providers_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFinalitySignatureRequest.ProtoReflect.Descriptor instead.
func (*AddFinalitySignatureRequest) Descriptor() ([]byte, []int) {
	return file_finality_providers_proto_rawDescGZIP(), []int{5}
}

func (x *AddFinalitySignatureRequest) GetBtcPk() string {
	if x != nil {
		return x.BtcPk
	}
	return ""
}

func (x *AddFinalitySignatureRequest) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *AddFinalitySignatureRequest) GetAppHash() []byte {
	if x != nil {
		return x.AppHash
	}
	return nil
}

func (x *AddFinalitySignatureRequest) GetCheckDoubleSign() bool {
	if x != nil {
		return x.CheckDoubleSign
	}
	return false
}

type AddFinalitySignatureResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// hash of the successful chain finality signature submission transaction
	TxHash string `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// the hex string of the extracted Bitcoin secp256k1 private key
	ExtractedSkHex string `protobuf:"bytes,2,opt,name=extracted_sk_hex,json=extractedSkHex,proto3" json:"extracted_sk_hex,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AddFinalitySignatureResponse) Reset() {
	*x = AddFinalitySignatureResponse{}
	mi := &file_finality_providers_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddFinalitySignatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFinalitySignatureResponse) ProtoMessage() {}

func (x *AddFinalitySignatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_finality_providers_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFinalitySignatureResponse.ProtoReflect.Descriptor instead.
func (*AddFinalitySignatureResponse) Descriptor() ([]byte, []int) {
	return file_finality_providers_proto_rawDescGZIP(), []int{6}
}

func (x *AddFinalitySignatureResponse) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *AddFinalitySignatureResponse) GetExtractedSkHex() string {
	if x != nil {
		return x.ExtractedSkHex
	}
	return ""
}

type UnjailFinalityProviderRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// btc_pk is hex string of the BTC secp256k1 public key of the finality
	// provider encoded in BIP-340 spec
	BtcPk         string `protobuf:"bytes,1,opt,name=btc_pk,json=btcPk,proto3" json:"btc_pk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnjailFinalityProviderRequest) Reset() {
	*x = UnjailFinalityProviderRequest{}
	mi := &file_finality_providers_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnjailFinalityProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnjailFinalityProviderRequest) ProtoMessage() {}

func (x *UnjailFinalityProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_finality_providers_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnjailFinalityProviderRequest.ProtoReflect.Descriptor instead.
func (*UnjailFinalityProviderRequest) Descriptor() ([]byte, []int) {
	return file_finality_providers_proto_rawDescGZIP(), []int{7}
}

func (x *UnjailFinalityProviderRequest) GetBtcPk() string {
	if x != nil {
		return x.BtcPk
	}
	return ""
}

type UnjailFinalityProviderResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// hash of the successful chain unjail finality provider transaction
	TxHash        string `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnjailFinalityProviderResponse) Reset() {
	*x = UnjailFinalityProviderResponse{}
	mi := &file_finality_providers_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnjailFinalityProviderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnjailFinalityProviderResponse) ProtoMessage() {}

func (x *UnjailFinalityProviderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_finality_providers_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnjailFinalityProviderResponse.ProtoReflect.Descriptor instead.
func (*UnjailFinalityProviderResponse) Descriptor() ([]byte, []int) {
	return file_finality_providers_proto_rawDescGZIP(), []int{8}
}

func (x *UnjailFinalityProviderResponse) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

type QueryFinalityProviderRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// btc_pk is hex string of the BTC secp256k1 public key of the finality
	// provider encoded in BIP-340 spec
	BtcPk         string `protobuf:"bytes,1,opt,name=btc_pk,json=btcPk,proto3" json:"btc_pk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryFinalityProviderRequest) Reset() {
	*x = QueryFinalityProviderRequest{}
	mi := &file_finality_providers_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryFinalityProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFinalityProviderRequest) ProtoMessage() {}

func (x *QueryFinalityProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_finality_providers_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFinalityProviderRequest.ProtoReflect.Descriptor instead.
func (*QueryFinalityProviderRequest) Descriptor() ([]byte, []int) {
	return file_finality_providers_proto_rawDescGZIP(), []int{9}
}

func (x *QueryFinalityProviderRequest) GetBtcPk() string {
	if x != nil {
		return x.BtcPk
	}
	return ""
}

type QueryFinalityProviderResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	FinalityProvider *FinalityProviderInfo  `protobuf:"bytes,1,opt,name=finality_provider,json=finalityProvider,proto3" json:"finality_provider,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *QueryFinalityProviderResponse) Reset() {
	*x = QueryFinalityProviderResponse{}
	mi := &file_finality_providers_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryFinalityProviderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFinalityProviderResponse) ProtoMessage() {}

func (x *QueryFinalityProviderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_finality_providers_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFinalityProviderResponse.ProtoReflect.Descriptor instead.
func (*QueryFinalityProviderResponse) Descriptor() ([]byte, []int) {
	return file_finality_providers_proto_rawDescGZIP(), []int{10}
}

func (x *QueryFinalityProviderResponse) GetFinalityProvider() *FinalityProviderInfo {
	if x != nil {
		return x.FinalityProvider
	}
	return nil
}

type QueryFinalityProviderListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryFinalityProviderListRequest) Reset() {
	*x = QueryFinalityProviderListRequest{}
	mi := &file_finality_providers_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryFinalityProviderListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFinalityProviderListRequest) ProtoMessage() {}

func (x *QueryFinalityProviderListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_finality_providers_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFinalityProviderListRequest.ProtoReflect.Descriptor instead.
func (*QueryFinalityProviderListRequest) Descriptor() ([]byte, []int) {
	return file_finality_providers_proto_rawDescGZIP(), []int{11}
}

type QueryFinalityProviderListResponse struct {
	state             protoimpl.MessageState  `protogen:"open.v1"`
	FinalityProviders []*FinalityProviderInfo `protobuf:"bytes,1,rep,name=finality_providers,json=finalityProviders,proto3" json:"finality_providers,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *QueryFinalityProviderListResponse) Reset() {
	*x = QueryFinalityProviderListResponse{}
	mi := &file_finality_providers_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryFinalityProviderListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFinalityProviderListResponse) ProtoMessage() {}

func (x *QueryFinalityProviderListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_finality_providers_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFinalityProviderListResponse.ProtoReflect.Descriptor instead.
func (*QueryFinalityProviderListResponse) Descriptor() ([]byte, []int) {
	return file_finality_providers_proto_rawDescGZIP(), []int{12}
}

func (x *QueryFinalityProviderListResponse) GetFinalityProviders() []*FinalityProviderInfo {
	if x != nil {
		return x.FinalityProviders
	}
	return nil
}

// FinalityProvider defines current state of finality provider.
type FinalityProvider struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// fp_addr is the bech32 chain address identifier of the finality provider.
	FpAddr string `protobuf:"bytes,1,opt,name=fp_addr,json=fpAddr,proto3" json:"fp_addr,omitempty"`
	// btc_pk is the BTC secp256k1 PK of the finality provider encoded in
	// BIP-340 spec
	BtcPk []byte `protobuf:"bytes,2,opt,name=btc_pk,json=btcPk,proto3" json:"btc_pk,omitempty"`
	// description defines the description terms for the finality provider
	Description []byte `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// commission defines the commission rate for the finality provider
	Commission string `protobuf:"bytes,4,opt,name=commission,proto3" json:"commission,omitempty"`
	// chain_id is the identifier of the consumer chain that the finality
	// provider connected to
	ChainId string `protobuf:"bytes,5,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// last_voted_height defines the height of the last voted chain block
	LastVotedHeight uint64 `protobuf:"varint,6,opt,name=last_voted_height,json=lastVotedHeight,proto3" json:"last_voted_height,omitempty"`
	// status defines the current finality provider status
	Status FinalityProviderStatus `protobuf:"varint,7,opt,name=status,proto3,enum=proto.FinalityProviderStatus" json:"status,omitempty"`
	// commission_info contains information details of the finality provider
	// commission.
	CommissionInfo *CommissionInfo `protobuf:"bytes,8,opt,name=commission_info,json=commissionInfo,proto3" json:"commission_info,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FinalityProvider) Reset() {
	*x = FinalityProvider{}
	mi := &file_finality_providers_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalityProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalityProvider) ProtoMessage() {}

func (x *FinalityProvider) ProtoReflect() protoreflect.Message {
	mi := &file_finality_providers_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalityProvider.ProtoReflect.Descriptor instead.
func (*FinalityProvider) Descriptor() ([]byte, []int) {
	return file_finality_providers_proto_rawDescGZIP(), []int{13}
}

func (x *FinalityProvider) GetFpAddr() string {
	if x != nil {
		return x.FpAddr
	}
	return ""
}

func (x *FinalityProvider) GetBtcPk() []byte {
	if x != nil {
		return x.BtcPk
	}
	return nil
}

func (x *FinalityProvider) GetDescription() []byte {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *FinalityProvider) GetCommission() string {
	if x != nil {
		return x.Commission
	}
	return ""
}

func (x *FinalityProvider) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *FinalityProvider) GetLastVotedHeight() uint64 {
	if x != nil {
		return x.LastVotedHeight
	}
	return 0
}

func (x *FinalityProvider) GetStatus() FinalityProviderStatus {
	if x != nil {
		return x.Status
	}
	return FinalityProviderStatus_REGISTERED
}

func (x *FinalityProvider) GetCommissionInfo() *CommissionInfo {
	if x != nil {
		return x.CommissionInfo
	}
	return nil
}

// FinalityProviderInfo is the basic information of a finality provider mainly
// for external usage
type FinalityProviderInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// fp_addr is the bech32 chain address identifier of the finality provider.
	FpAddr string `protobuf:"bytes,1,opt,name=fp_addr,json=fpAddr,proto3" json:"fp_addr,omitempty"`
	// btc_pk_hex is the hex string of the BTC secp256k1 PK of the finality
	// provider encoded in BIP-340 spec
	BtcPkHex string `protobuf:"bytes,2,opt,name=btc_pk_hex,json=btcPkHex,proto3" json:"btc_pk_hex,omitempty"`
	// description defines the description terms for the finality provider
	Description *Description `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// commission defines the commission rate for the finality provider
	Commission string `protobuf:"bytes,4,opt,name=commission,proto3" json:"commission,omitempty"`
	// last_voted_height defines the height of the last voted chain block
	LastVotedHeight uint64 `protobuf:"varint,5,opt,name=last_voted_height,json=lastVotedHeight,proto3" json:"last_voted_height,omitempty"`
	// status defines the current finality provider status
	Status string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	// is_running shows whether the finality provider is running within the
	// daemon
	IsRunning bool `protobuf:"varint,7,opt,name=is_running,json=isRunning,proto3" json:"is_running,omitempty"`
	// commission_info contains information details of the finality provider
	// commission.
	CommissionInfo *CommissionInfo `protobuf:"bytes,8,opt,name=commission_info,json=commissionInfo,proto3" json:"commission_info,omitempty"`
	// chain_id is the identifier of the consumer chain that the finality
	// provider connected to
	ChainId       string `protobuf:"bytes,9,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FinalityProviderInfo) Reset() {
	*x = FinalityProviderInfo{}
	mi := &file_finality_providers_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalityProviderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalityProviderInfo) ProtoMessage() {}

func (x *FinalityProviderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_finality_providers_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalityProviderInfo.ProtoReflect.Descriptor instead.
func (*FinalityProviderInfo) Descriptor() ([]byte, []int) {
	return file_finality_providers_proto_rawDescGZIP(), []int{14}
}

func (x *FinalityProviderInfo) GetFpAddr() string {
	if x != nil {
		return x.FpAddr
	}
	return ""
}

func (x *FinalityProviderInfo) GetBtcPkHex() string {
	if x != nil {
		return x.BtcPkHex
	}
	return ""
}

func (x *FinalityProviderInfo) GetDescription() *Description {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *FinalityProviderInfo) GetCommission() string {
	if x != nil {
		return x.Commission
	}
	return ""
}

func (x *FinalityProviderInfo) GetLastVotedHeight() uint64 {
	if x != nil {
		return x.LastVotedHeight
	}
	return 0
}

func (x *FinalityProviderInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *FinalityProviderInfo) GetIsRunning() bool {
	if x != nil {
		return x.IsRunning
	}
	return false
}

func (x *FinalityProviderInfo) GetCommissionInfo() *CommissionInfo {
	if x != nil {
		return x.CommissionInfo
	}
	return nil
}

func (x *FinalityProviderInfo) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

// CommissionInfo defines the information related to the commission of
// a finality provider.
type CommissionInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// max_rate defines the maximum commission rate which validator can ever
	// charge, as a fraction.
	MaxRate string `protobuf:"bytes,1,opt,name=max_rate,json=maxRate,proto3" json:"max_rate,omitempty"`
	// max_change_rate defines the maximum daily increase of the validator
	// commission, as a fraction.
	MaxChangeRate string `protobuf:"bytes,2,opt,name=max_change_rate,json=maxChangeRate,proto3" json:"max_change_rate,omitempty"`
	// update_time is the last time the commission rate was changed.
	UpdateTime    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommissionInfo) Reset() {
	*x = CommissionInfo{}
	mi := &file_finality_providers_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommissionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommissionInfo) ProtoMessage() {}

func (x *CommissionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_finality_providers_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommissionInfo.ProtoReflect.Descriptor instead.
func (*CommissionInfo) Descriptor() ([]byte, []int) {
	return file_finality_providers_proto_rawDescGZIP(), []int{15}
}

func (x *CommissionInfo) GetMaxRate() string {
	if x != nil {
		return x.MaxRate
	}
	return ""
}

func (x *CommissionInfo) GetMaxChangeRate() string {
	if x != nil {
		return x.MaxChangeRate
	}
	return ""
}

func (x *CommissionInfo) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// Description defines description fields for a finality provider
type Description struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Moniker         string                 `protobuf:"bytes,1,opt,name=moniker,proto3" json:"moniker,omitempty"`
	Identity        string                 `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	Website         string                 `protobuf:"bytes,3,opt,name=website,proto3" json:"website,omitempty"`
	SecurityContact string                 `protobuf:"bytes,4,opt,name=security_contact,json=securityContact,proto3" json:"security_contact,omitempty"`
	Details         string                 `protobuf:"bytes,5,opt,name=details,proto3" json:"details,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Description) Reset() {
	*x = Description{}
	mi := &file_finality_providers_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Description) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Description) ProtoMessage() {}

func (x *Description) ProtoReflect() protoreflect.Message {
	mi := &file_finality_providers_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Description.ProtoReflect.Descriptor instead.
func (*Description) Descriptor() ([]byte, []int) {
	return file_finality_providers_proto_rawDescGZIP(), []int{16}
}

func (x *Description) GetMoniker() string {
	if x != nil {
		return x.Moniker
	}
	return ""
}

func (x *Description) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *Description) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *Description) GetSecurityContact() string {
	if x != nil {
		return x.SecurityContact
	}
	return ""
}

func (x *Description) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

// ProofOfPossession is the proof of possession that a chain secp256k1
// secret key and a Bitcoin secp256k1 secret key are held by the same
// person
type ProofOfPossession struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// btc_sig is the signature generated via sign(sk_btc, fp_addr)
	// the signature follows encoding in BIP-340 spec
	BtcSig        []byte `protobuf:"bytes,1,opt,name=btc_sig,json=btcSig,proto3" json:"btc_sig,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProofOfPossession) Reset() {
	*x = ProofOfPossession{}
	mi := &file_finality_providers_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProofOfPossession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofOfPossession) ProtoMessage() {}

func (x *ProofOfPossession) ProtoReflect() protoreflect.Message {
	mi := &file_finality_providers_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofOfPossession.ProtoReflect.Descriptor instead.
func (*ProofOfPossession) Descriptor() ([]byte, []int) {
	return file_finality_providers_proto_rawDescGZIP(), []int{17}
}

func (x *ProofOfPossession) GetBtcSig() []byte {
	if x != nil {
		return x.BtcSig
	}
	return nil
}

type SchnorrRandPair struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PubRand       []byte                 `protobuf:"bytes,1,opt,name=pub_rand,json=pubRand,proto3" json:"pub_rand,omitempty"`
	SecRand       []byte                 `protobuf:"bytes,2,opt,name=sec_rand,json=secRand,proto3" json:"sec_rand,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SchnorrRandPair) Reset() {
	*x = SchnorrRandPair{}
	mi := &file_finality_providers_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchnorrRandPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchnorrRandPair) ProtoMessage() {}

func (x *SchnorrRandPair) ProtoReflect() protoreflect.Message {
	mi := &file_finality_providers_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchnorrRandPair.ProtoReflect.Descriptor instead.
func (*SchnorrRandPair) Descriptor() ([]byte, []int) {
	return file_finality_providers_proto_rawDescGZIP(), []int{18}
}

func (x *SchnorrRandPair) GetPubRand() []byte {
	if x != nil {
		return x.PubRand
	}
	return nil
}

func (x *SchnorrRandPair) GetSecRand() []byte {
	if x != nil {
		return x.SecRand
	}
	return nil
}

type SignMessageFromChainKeyRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// msg_to_sign the raw bytes to sign using the private key.
	MsgToSign []byte `protobuf:"bytes,1,opt,name=msg_to_sign,json=msgToSign,proto3" json:"msg_to_sign,omitempty"`
	// key_name is the identifier key in keyring
	KeyName string `protobuf:"bytes,2,opt,name=key_name,json=keyName,proto3" json:"key_name,omitempty"`
	// hd_path is the hd path for private key derivation
	HdPath        string `protobuf:"bytes,3,opt,name=hd_path,json=hdPath,proto3" json:"hd_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignMessageFromChainKeyRequest) Reset() {
	*x = SignMessageFromChainKeyRequest{}
	mi := &file_finality_providers_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignMessageFromChainKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignMessageFromChainKeyRequest) ProtoMessage() {}

func (x *SignMessageFromChainKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_finality_providers_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignMessageFromChainKeyRequest.ProtoReflect.Descriptor instead.
func (*SignMessageFromChainKeyRequest) Descriptor() ([]byte, []int) {
	return file_finality_providers_proto_rawDescGZIP(), []int{19}
}

func (x *SignMessageFromChainKeyRequest) GetMsgToSign() []byte {
	if x != nil {
		return x.MsgToSign
	}
	return nil
}

func (x *SignMessageFromChainKeyRequest) GetKeyName() string {
	if x != nil {
		return x.KeyName
	}
	return ""
}

func (x *SignMessageFromChainKeyRequest) GetHdPath() string {
	if x != nil {
		return x.HdPath
	}
	return ""
}

// SignMessageFromChainKeyResponse contains the signed message from the chain
// keyring.
type SignMessageFromChainKeyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Signature     []byte                 `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignMessageFromChainKeyResponse) Reset() {
	*x = SignMessageFromChainKeyResponse{}
	mi := &file_finality_providers_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignMessageFromChainKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignMessageFromChainKeyResponse) ProtoMessage() {}

func (x *SignMessageFromChainKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_finality_providers_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignMessageFromChainKeyResponse.ProtoReflect.Descriptor instead.
func (*SignMessageFromChainKeyResponse) Descriptor() ([]byte, []int) {
	return file_finality_providers_proto_rawDescGZIP(), []int{20}
}

func (x *SignMessageFromChainKeyResponse) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// FinalityProviderInfo is the basic information of a finality provider mainly
// for external usage
type EditFinalityProviderRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// btc_pk is the hex string of the BTC secp256k1 PK of the finality provider
	// encoded in BIP-340 spec
	BtcPk string `protobuf:"bytes,1,opt,name=btc_pk,json=btcPk,proto3" json:"btc_pk,omitempty"`
	// description defines the description terms for the finality provider
	Description *Description `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// commission defines the updated commission rate of the finality provider
	Commission    string `protobuf:"bytes,4,opt,name=commission,proto3" json:"commission,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EditFinalityProviderRequest) Reset() {
	*x = EditFinalityProviderRequest{}
	mi := &file_finality_providers_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EditFinalityProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditFinalityProviderRequest) ProtoMessage() {}

func (x *EditFinalityProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_finality_providers_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditFinalityProviderRequest.ProtoReflect.Descriptor instead.
func (*EditFinalityProviderRequest) Descriptor() ([]byte, []int) {
	return file_finality_providers_proto_rawDescGZIP(), []int{21}
}

func (x *EditFinalityProviderRequest) GetBtcPk() string {
	if x != nil {
		return x.BtcPk
	}
	return ""
}

func (x *EditFinalityProviderRequest) GetDescription() *Description {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *EditFinalityProviderRequest) GetCommission() string {
	if x != nil {
		return x.Commission
	}
	return ""
}

type RemoveMerkleProofRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// btc_pk_hex is the hex string of the BTC secp256k1 PK of the finality
	// provider encoded in BIP-340 spec
	BtcPkHex string `protobuf:"bytes,1,opt,name=btc_pk_hex,json=btcPkHex,proto3" json:"btc_pk_hex,omitempty"`
	// chain_id is the identifier of the consumer chain
	ChainId string `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// target_height to to delete all proofs
	TargetHeight  uint64 `protobuf:"varint,3,opt,name=target_height,json=targetHeight,proto3" json:"target_height,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveMerkleProofRequest) Reset() {
	*x = RemoveMerkleProofRequest{}
	mi := &file_finality_providers_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveMerkleProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveMerkleProofRequest) ProtoMessage() {}

func (x *RemoveMerkleProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_finality_providers_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveMerkleProofRequest.ProtoReflect.Descriptor instead.
func (*RemoveMerkleProofRequest) Descriptor() ([]byte, []int) {
	return file_finality_providers_proto_rawDescGZIP(), []int{22}
}

func (x *RemoveMerkleProofRequest) GetBtcPkHex() string {
	if x != nil {
		return x.BtcPkHex
	}
	return ""
}

func (x *RemoveMerkleProofRequest) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *RemoveMerkleProofRequest) GetTargetHeight() uint64 {
	if x != nil {
		return x.TargetHeight
	}
	return 0
}

// Define an empty response message
type EmptyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmptyResponse) Reset() {
	*x = EmptyResponse{}
	mi := &file_finality_providers_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmptyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyResponse) ProtoMessage() {}

func (x *EmptyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_finality_providers_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyResponse.ProtoReflect.Descriptor instead.
func (*EmptyResponse) Descriptor() ([]byte, []int) {
	return file_finality_providers_proto_rawDescGZIP(), []int{23}
}

var File_finality_providers_proto protoreflect.FileDescriptor

var file_finality_providers_proto_rawDesc = string([]byte{
	0x0a, 0x18, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f,
	0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f,
	0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x10, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2b, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xdb, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x65, 0x6f, 0x74, 0x73, 0x5f, 0x70, 0x6b, 0x5f, 0x68, 0x65,
	0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6f, 0x74, 0x73, 0x50, 0x6b, 0x48,
	0x65, 0x78, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x73, 0x42, 0x04,
	0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x87, 0x02, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x04, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde,
	0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d,
	0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d,
	0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x04, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x4c, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x59, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde,
	0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d,
	0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d,
	0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0d, 0x6d, 0x61, 0x78,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x3a, 0x04, 0xe8, 0xa0, 0x1f, 0x01,
	0x22, 0x83, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x22, 0x93, 0x01, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x46, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x74, 0x63, 0x5f, 0x70, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x74, 0x63, 0x50, 0x6b, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x70, 0x70, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x22, 0x61, 0x0a, 0x1c,
	0x41, 0x64, 0x64, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x73, 0x6b, 0x5f, 0x68, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x53, 0x6b, 0x48, 0x65, 0x78, 0x22,
	0x36, 0x0a, 0x1d, 0x55, 0x6e, 0x6a, 0x61, 0x69, 0x6c, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x62, 0x74, 0x63, 0x5f, 0x70, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x62, 0x74, 0x63, 0x50, 0x6b, 0x22, 0x39, 0x0a, 0x1e, 0x55, 0x6e, 0x6a, 0x61, 0x69,
	0x6c, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61,
	0x73, 0x68, 0x22, 0x35, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x74, 0x63, 0x5f, 0x70, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x62, 0x74, 0x63, 0x50, 0x6b, 0x22, 0x69, 0x0a, 0x1d, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x10, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x22, 0x22, 0x0a, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6f, 0x0a, 0x21, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a,
	0x12, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x22, 0x81, 0x03, 0x0a, 0x10, 0x46, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x31,
	0x0a, 0x07, 0x66, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x18, 0xd2, 0xb4, 0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x66, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x74, 0x63, 0x5f, 0x70, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x62, 0x74, 0x63, 0x50, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23,
	0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64,
	0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x44, 0x65, 0x63, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x64,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a,
	0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa0, 0x03,
	0x0a, 0x14, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x07, 0x66, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb4, 0x2d, 0x14, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x06, 0x66, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1c, 0x0a, 0x0a, 0x62, 0x74, 0x63,
	0x5f, 0x70, 0x6b, 0x5f, 0x68, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62,
	0x74, 0x63, 0x50, 0x6b, 0x48, 0x65, 0x78, 0x12, 0x34, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x23, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x64,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6c,
	0x61, 0x73, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x72, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x52, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x22, 0x86, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68,
	0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x59, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00,
	0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f,
	0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2,
	0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0d, 0x6d,
	0x61, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8,
	0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x3a, 0x04, 0xe8, 0xa0, 0x1f, 0x01, 0x22, 0xa2, 0x01, 0x0a, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x6e,
	0x69, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x6e, 0x69,
	0x6b, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x2c,
	0x0a, 0x11, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x50, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x74, 0x63, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x74, 0x63, 0x53, 0x69, 0x67, 0x22, 0x47, 0x0a, 0x0f,
	0x53, 0x63, 0x68, 0x6e, 0x6f, 0x72, 0x72, 0x52, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x69, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x75, 0x62, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x70, 0x75, 0x62, 0x52, 0x61, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65,
	0x63, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x65,
	0x63, 0x52, 0x61, 0x6e, 0x64, 0x22, 0x74, 0x0a, 0x1e, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x73, 0x67, 0x5f, 0x74,
	0x6f, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6d, 0x73,
	0x67, 0x54, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x64, 0x50, 0x61, 0x74, 0x68, 0x22, 0x3f, 0x0a, 0x1f, 0x53,
	0x69, 0x67, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xb9, 0x01, 0x0a,
	0x1b, 0x45, 0x64, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x62, 0x74, 0x63, 0x5f, 0x70, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x74,
	0x63, 0x50, 0x6b, 0x12, 0x34, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xda,
	0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f,
	0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4,
	0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x78, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x62, 0x74, 0x63, 0x5f, 0x70, 0x6b, 0x5f, 0x68,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x74, 0x63, 0x50, 0x6b, 0x48,
	0x65, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x22, 0x0f, 0x0a, 0x0d, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2a, 0xa4, 0x01, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x00, 0x1a, 0x0e,
	0x8a, 0x9d, 0x20, 0x0a, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x1a, 0x0a, 0x8a, 0x9d, 0x20, 0x06,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x02, 0x1a, 0x0c, 0x8a, 0x9d, 0x20, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x4c, 0x41, 0x53, 0x48, 0x45, 0x44, 0x10, 0x03, 0x1a,
	0x0b, 0x8a, 0x9d, 0x20, 0x07, 0x53, 0x4c, 0x41, 0x53, 0x48, 0x45, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x4a, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x0a, 0x8a, 0x9d, 0x20, 0x06, 0x4a, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x1a, 0x04, 0x88, 0xa3, 0x1e, 0x00, 0x32, 0xf4, 0x05, 0x0a, 0x11, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x38, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5f, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x65, 0x0a, 0x16, 0x55, 0x6e, 0x6a, 0x61, 0x69, 0x6c, 0x46, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x6a, 0x61, 0x69, 0x6c, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x6a, 0x61, 0x69,
	0x6c, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x15, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a,
	0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a,
	0x14, 0x45, 0x64, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x64,
	0x69, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x50, 0x0a, 0x17, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d,
	0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x45, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x62, 0x61, 0x62, 0x79, 0x6c, 0x6f, 0x6e, 0x6c, 0x61, 0x62, 0x73, 0x2d, 0x69, 0x6f, 0x2f, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_finality_providers_proto_rawDescOnce sync.Once
	file_finality_providers_proto_rawDescData []byte
)

func file_finality_providers_proto_rawDescGZIP() []byte {
	file_finality_providers_proto_rawDescOnce.Do(func() {
		file_finality_providers_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_finality_providers_proto_rawDesc), len(file_finality_providers_proto_rawDesc)))
	})
	return file_finality_providers_proto_rawDescData
}

var file_finality_providers_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_finality_providers_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_finality_providers_proto_goTypes = []any{
	(FinalityProviderStatus)(0),               // 0: proto.FinalityProviderStatus
	(*GetInfoRequest)(nil),                    // 1: proto.GetInfoRequest
	(*GetInfoResponse)(nil),                   // 2: proto.GetInfoResponse
	(*CreateFinalityProviderRequest)(nil),     // 3: proto.CreateFinalityProviderRequest
	(*CommissionRates)(nil),                   // 4: proto.CommissionRates
	(*CreateFinalityProviderResponse)(nil),    // 5: proto.CreateFinalityProviderResponse
	(*AddFinalitySignatureRequest)(nil),       // 6: proto.AddFinalitySignatureRequest
	(*AddFinalitySignatureResponse)(nil),      // 7: proto.AddFinalitySignatureResponse
	(*UnjailFinalityProviderRequest)(nil),     // 8: proto.UnjailFinalityProviderRequest
	(*UnjailFinalityProviderResponse)(nil),    // 9: proto.UnjailFinalityProviderResponse
	(*QueryFinalityProviderRequest)(nil),      // 10: proto.QueryFinalityProviderRequest
	(*QueryFinalityProviderResponse)(nil),     // 11: proto.QueryFinalityProviderResponse
	(*QueryFinalityProviderListRequest)(nil),  // 12: proto.QueryFinalityProviderListRequest
	(*QueryFinalityProviderListResponse)(nil), // 13: proto.QueryFinalityProviderListResponse
	(*FinalityProvider)(nil),                  // 14: proto.FinalityProvider
	(*FinalityProviderInfo)(nil),              // 15: proto.FinalityProviderInfo
	(*CommissionInfo)(nil),                    // 16: proto.CommissionInfo
	(*Description)(nil),                       // 17: proto.Description
	(*ProofOfPossession)(nil),                 // 18: proto.ProofOfPossession
	(*SchnorrRandPair)(nil),                   // 19: proto.SchnorrRandPair
	(*SignMessageFromChainKeyRequest)(nil),    // 20: proto.SignMessageFromChainKeyRequest
	(*SignMessageFromChainKeyResponse)(nil),   // 21: proto.SignMessageFromChainKeyResponse
	(*EditFinalityProviderRequest)(nil),       // 22: proto.EditFinalityProviderRequest
	(*RemoveMerkleProofRequest)(nil),          // 23: proto.RemoveMerkleProofRequest
	(*EmptyResponse)(nil),                     // 24: proto.EmptyResponse
	(*timestamppb.Timestamp)(nil),             // 25: google.protobuf.Timestamp
}
var file_finality_providers_proto_depIdxs = []int32{
	4,  // 0: proto.CreateFinalityProviderRequest.commission:type_name -> proto.CommissionRates
	15, // 1: proto.CreateFinalityProviderResponse.finality_provider:type_name -> proto.FinalityProviderInfo
	15, // 2: proto.QueryFinalityProviderResponse.finality_provider:type_name -> proto.FinalityProviderInfo
	15, // 3: proto.QueryFinalityProviderListResponse.finality_providers:type_name -> proto.FinalityProviderInfo
	0,  // 4: proto.FinalityProvider.status:type_name -> proto.FinalityProviderStatus
	16, // 5: proto.FinalityProvider.commission_info:type_name -> proto.CommissionInfo
	17, // 6: proto.FinalityProviderInfo.description:type_name -> proto.Description
	16, // 7: proto.FinalityProviderInfo.commission_info:type_name -> proto.CommissionInfo
	25, // 8: proto.CommissionInfo.update_time:type_name -> google.protobuf.Timestamp
	17, // 9: proto.EditFinalityProviderRequest.description:type_name -> proto.Description
	1,  // 10: proto.FinalityProviders.GetInfo:input_type -> proto.GetInfoRequest
	3,  // 11: proto.FinalityProviders.CreateFinalityProvider:input_type -> proto.CreateFinalityProviderRequest
	6,  // 12: proto.FinalityProviders.AddFinalitySignature:input_type -> proto.AddFinalitySignatureRequest
	8,  // 13: proto.FinalityProviders.UnjailFinalityProvider:input_type -> proto.UnjailFinalityProviderRequest
	10, // 14: proto.FinalityProviders.QueryFinalityProvider:input_type -> proto.QueryFinalityProviderRequest
	12, // 15: proto.FinalityProviders.QueryFinalityProviderList:input_type -> proto.QueryFinalityProviderListRequest
	22, // 16: proto.FinalityProviders.EditFinalityProvider:input_type -> proto.EditFinalityProviderRequest
	23, // 17: proto.FinalityProviders.UnsafeRemoveMerkleProof:input_type -> proto.RemoveMerkleProofRequest
	2,  // 18: proto.FinalityProviders.GetInfo:output_type -> proto.GetInfoResponse
	5,  // 19: proto.FinalityProviders.CreateFinalityProvider:output_type -> proto.CreateFinalityProviderResponse
	7,  // 20: proto.FinalityProviders.AddFinalitySignature:output_type -> proto.AddFinalitySignatureResponse
	9,  // 21: proto.FinalityProviders.UnjailFinalityProvider:output_type -> proto.UnjailFinalityProviderResponse
	11, // 22: proto.FinalityProviders.QueryFinalityProvider:output_type -> proto.QueryFinalityProviderResponse
	13, // 23: proto.FinalityProviders.QueryFinalityProviderList:output_type -> proto.QueryFinalityProviderListResponse
	24, // 24: proto.FinalityProviders.EditFinalityProvider:output_type -> proto.EmptyResponse
	24, // 25: proto.FinalityProviders.UnsafeRemoveMerkleProof:output_type -> proto.EmptyResponse
	18, // [18:26] is the sub-list for method output_type
	10, // [10:18] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_finality_providers_proto_init() }
func file_finality_providers_proto_init() {
	if File_finality_providers_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_finality_providers_proto_rawDesc), len(file_finality_providers_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_finality_providers_proto_goTypes,
		DependencyIndexes: file_finality_providers_proto_depIdxs,
		EnumInfos:         file_finality_providers_proto_enumTypes,
		MessageInfos:      file_finality_providers_proto_msgTypes,
	}.Build()
	File_finality_providers_proto = out.File
	file_finality_providers_proto_goTypes = nil
	file_finality_providers_proto_depIdxs = nil
}
