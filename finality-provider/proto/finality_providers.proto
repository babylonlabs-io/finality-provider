syntax = "proto3";

package proto;

import "gogoproto/gogo.proto";
import "cosmos/staking/v1beta1/staking.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/babylonlabs-io/finality-provider/finality-provider/proto";

service FinalityProviders {
    // GetInfo returns the information of the daemon
    rpc GetInfo (GetInfoRequest) returns (GetInfoResponse);

    // CreateFinalityProvider generates and saves a finality provider object
    rpc CreateFinalityProvider (CreateFinalityProviderRequest)
        returns (CreateFinalityProviderResponse);

    // AddFinalitySignature sends a transactions to the consumer chain to add a Finality
    // signature for a block
    rpc AddFinalitySignature(AddFinalitySignatureRequest)
        returns (AddFinalitySignatureResponse);

    // UnjailFinalityProvider sends a transactions to the consumer chain to unjail a given
    // finality provider
    rpc UnjailFinalityProvider(UnjailFinalityProviderRequest)
        returns (UnjailFinalityProviderResponse);

    // QueryFinalityProvider queries the finality provider
    rpc QueryFinalityProvider (QueryFinalityProviderRequest) returns (QueryFinalityProviderResponse);

    // QueryFinalityProviderList queries a list of finality providers
    rpc QueryFinalityProviderList (QueryFinalityProviderListRequest)
        returns (QueryFinalityProviderListResponse);

    // EditFinalityProvider edits finality provider
    rpc EditFinalityProvider (EditFinalityProviderRequest) returns (EmptyResponse);

    // UnsafeRemoveMerkleProof removes merkle proofs up to target height
    rpc UnsafeRemoveMerkleProof (RemoveMerkleProofRequest) returns (EmptyResponse);
}

message GetInfoRequest {
}

message GetInfoResponse {
    string version = 1;
}

message CreateFinalityProviderRequest {
    // key_name is the identifier key in keyring
    string key_name = 1;
    // passphrase is used to encrypt the keys
    string passphrase = 2;
    // chain_id is the identifier of the consumer chain that the finality provider is connected to
    string chain_id = 3;
    // description defines the description terms for the finality provider
    bytes description = 4;
    // commission defines the commission rate for the finality provider
    string commission = 5 [
        (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
        (gogoproto.nullable)   = false
    ];
    // eots_pk_hex it is the optional EOTS public key and used to ask for
    // the key record from the EOTS manager for the corresponding EOTS public key.
    // If this property is not set, it will create a new EOTS key.
    string eots_pk_hex = 6;
}

message CreateFinalityProviderResponse {
    FinalityProviderInfo finality_provider = 1;
    // hash of the successful finality provider creation transaction
    string tx_hash = 2;
}

message AddFinalitySignatureRequest {
    // btc_pk is hex string of the BTC secp256k1 public key of the finality provider encoded in BIP-340 spec
    string btc_pk = 1;
    // height is the height of the chain block
    uint64 height = 2;
    // app_hash is the AppHash of the chain block
    bytes app_hash = 3;
    // check_double_sign use double sign protection when doing EOTS sign
    bool check_double_sign = 4;
}

message AddFinalitySignatureResponse {
    // hash of the successful chain finality signature submission transaction
    string tx_hash = 1;
    // the hex string of the extracted Bitcoin secp256k1 private key
    string extracted_sk_hex = 2;
    // the hex string of the local Bitcoin secp256k1 private key
    string local_sk_hex = 3;
}

message UnjailFinalityProviderRequest {
    // btc_pk is hex string of the BTC secp256k1 public key of the finality provider encoded in BIP-340 spec
    string btc_pk = 1;
}

message UnjailFinalityProviderResponse {
    // hash of the successful chain unjail finality provider transaction
    string tx_hash = 1;
}

message QueryFinalityProviderRequest {
    // btc_pk is hex string of the BTC secp256k1 public key of the finality provider encoded in BIP-340 spec
    string btc_pk = 1;
}

message QueryFinalityProviderResponse {
    FinalityProviderInfo finality_provider = 1;
}

message QueryFinalityProviderListRequest {
}

message QueryFinalityProviderListResponse {
    repeated FinalityProviderInfo finality_providers = 1;
}

// FinalityProvider defines current state of finality provider.
message FinalityProvider {
    // fp_addr is the bech32 chain address identifier of the finality provider.
    string fp_addr = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
    // btc_pk is the BTC secp256k1 PK of the finality provider encoded in BIP-340 spec
    bytes btc_pk = 2;
    // description defines the description terms for the finality provider
    bytes description = 3;
    // commission defines the commission rate for the finality provider
    string commission = 4 [
        (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
        (gogoproto.nullable)   = false
    ];
    // chain_id is the identifier of the consumer chain that the finality provider connected to
    string chain_id = 5;
    // last_voted_height defines the height of the last voted chain block
    uint64 last_voted_height = 6;
    // status defines the current finality provider status
    FinalityProviderStatus status = 7;
}

// FinalityProviderInfo is the basic information of a finality provider mainly for external usage
message FinalityProviderInfo {
    // fp_addr is the bech32 chain address identifier of the finality provider.
    string fp_addr = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
    // btc_pk_hex is the hex string of the BTC secp256k1 PK of the finality provider encoded in BIP-340 spec
    string btc_pk_hex = 2;
    // description defines the description terms for the finality provider
    Description description = 3;
    // commission defines the commission rate for the finality provider
    string commission = 4 [
        (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
        (gogoproto.nullable)   = false
    ];
    // last_voted_height defines the height of the last voted chain block
    uint64 last_voted_height = 5;
    // status defines the current finality provider status
    string status = 6;
    // is_running shows whether the finality provider is running within the daemon
    bool is_running = 7;
}

// Description defines description fields for a finality provider
message Description {
    string moniker = 1;
    string identity = 2;
    string website = 3;
    string security_contact = 4;
    string details = 5;
}

// ProofOfPossession is the proof of possession that a chain secp256k1
// secret key and a Bitcoin secp256k1 secret key are held by the same
// person
message ProofOfPossession {
    // btc_sig is the signature generated via sign(sk_btc, fp_addr)
    // the signature follows encoding in BIP-340 spec
    bytes btc_sig = 1;
}

message SchnorrRandPair {
    bytes pub_rand = 1;
    bytes sec_rand = 2;
}

// FinalityProviderStatus is the status of a finality provider
// a FinalityProvider object has 5 states:
//  - Registered - created and registered to the consumer chain, but not voting yet (No
//  delegated stake)
//  - Inactive - the finality provider does not have voting power to vote
//  - Active - the finality provider has voting power to vote
//  Finality Provider was already active.
//  - Slashed - the finality provider looses all the voting power forever due to double voting
//  - Jailed - the finality provider temporarily looses the voting power due to being sluggish
// Possible State Transactions:
//  - Registered -> Inactive
//  - Inactive   -> Active
//  - Active     -> Inactive
//  - Active     -> Slashed
//  - Active     -> Jailed
//  - Jailed     -> Active
//  - Jailed     -> Inactive
enum FinalityProviderStatus {
    option (gogoproto.goproto_enum_prefix) = false;

    // REGISTERED defines a finality provider that has been registered
    // to the consumer chain but has no delegated stake
    REGISTERED = 0 [(gogoproto.enumvalue_customname) = "REGISTERED"];
    // ACTIVE defines a finality provider that is delegated to vote
    ACTIVE = 1 [(gogoproto.enumvalue_customname) = "ACTIVE"];
    // INACTIVE defines a finality provider whose delegations are reduced to zero but not slashed
    INACTIVE = 2 [(gogoproto.enumvalue_customname) = "INACTIVE"];
    // SLASHED defines a finality provider that has been slashed
    SLASHED = 3 [(gogoproto.enumvalue_customname) = "SLASHED"];
    // JAILED defines a finality provider that has been jailed
    JAILED = 4 [(gogoproto.enumvalue_customname) = "JAILED"];
}

message SignMessageFromChainKeyRequest {
    // msg_to_sign the raw bytes to sign using the private key.
    bytes msg_to_sign = 1;
    // key_name is the identifier key in keyring
    string key_name = 2;
    // passphrase is used to encrypt the keys
    string passphrase = 3;
    // hd_path is the hd path for private key derivation
    string hd_path = 4;
}

// SignMessageFromChainKeyResponse contains the signed message from the chain keyring.
message SignMessageFromChainKeyResponse {
    bytes signature = 1;
}

// FinalityProviderInfo is the basic information of a finality provider mainly for external usage
message EditFinalityProviderRequest {
    // btc_pk is the hex string of the BTC secp256k1 PK of the finality provider encoded in BIP-340 spec
    string btc_pk = 1;
    // description defines the description terms for the finality provider
    Description description = 2;
    // commission defines the updated commission rate of the finality provider
    string commission = 4 [
        (cosmos_proto.scalar)  = "cosmos.Dec",
        (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec"
    ];
}

message RemoveMerkleProofRequest {
    // btc_pk_hex is the hex string of the BTC secp256k1 PK of the finality provider encoded in BIP-340 spec
    string btc_pk_hex = 1;
    // chain_id is the identifier of the consumer chain
    string chain_id = 2;
    // target_height to to delete all proofs
    uint64 target_height = 3;
}

// Define an empty response message
message EmptyResponse {}
