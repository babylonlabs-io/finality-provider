// Code generated by MockGen. DO NOT EDIT.
// Source: clientcontroller/api/interface.go
//
// Generated by this command:
//
//	mockgen -source=clientcontroller/api/interface.go -package mocks -destination /home/runchao/Projects/BabylonLabs/finality-provider/testutil/mocks/clientcontroller.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	math "cosmossdk.io/math"
	types "github.com/babylonlabs-io/babylon/v3/x/btcstaking/types"
	api "github.com/babylonlabs-io/finality-provider/clientcontroller/api"
	types0 "github.com/babylonlabs-io/finality-provider/types"
	btcec "github.com/btcsuite/btcd/btcec/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockClientController is a mock of ClientController interface.
type MockClientController struct {
	ctrl     *gomock.Controller
	recorder *MockClientControllerMockRecorder
	isgomock struct{}
}

// MockClientControllerMockRecorder is the mock recorder for MockClientController.
type MockClientControllerMockRecorder struct {
	mock *MockClientController
}

// NewMockClientController creates a new mock instance.
func NewMockClientController(ctrl *gomock.Controller) *MockClientController {
	mock := &MockClientController{ctrl: ctrl}
	mock.recorder = &MockClientControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientController) EXPECT() *MockClientControllerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClientController) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientControllerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClientController)(nil).Close))
}

// EditFinalityProvider mocks base method.
func (m *MockClientController) EditFinalityProvider(fpPk *btcec.PublicKey, commission *math.LegacyDec, description []byte) (*types.MsgEditFinalityProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditFinalityProvider", fpPk, commission, description)
	ret0, _ := ret[0].(*types.MsgEditFinalityProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditFinalityProvider indicates an expected call of EditFinalityProvider.
func (mr *MockClientControllerMockRecorder) EditFinalityProvider(fpPk, commission, description any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditFinalityProvider", reflect.TypeOf((*MockClientController)(nil).EditFinalityProvider), fpPk, commission, description)
}

// GetFpPopContextV0 mocks base method.
func (m *MockClientController) GetFpPopContextV0() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFpPopContextV0")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFpPopContextV0 indicates an expected call of GetFpPopContextV0.
func (mr *MockClientControllerMockRecorder) GetFpPopContextV0() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFpPopContextV0", reflect.TypeOf((*MockClientController)(nil).GetFpPopContextV0))
}

// QueryFinalityProvider mocks base method.
func (m *MockClientController) QueryFinalityProvider(fpPk *btcec.PublicKey) (*types.QueryFinalityProviderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryFinalityProvider", fpPk)
	ret0, _ := ret[0].(*types.QueryFinalityProviderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFinalityProvider indicates an expected call of QueryFinalityProvider.
func (mr *MockClientControllerMockRecorder) QueryFinalityProvider(fpPk any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFinalityProvider", reflect.TypeOf((*MockClientController)(nil).QueryFinalityProvider), fpPk)
}

// RegisterFinalityProvider mocks base method.
func (m *MockClientController) RegisterFinalityProvider(chainID string, fpPk *btcec.PublicKey, pop []byte, commission types.CommissionRates, description []byte) (*types0.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterFinalityProvider", chainID, fpPk, pop, commission, description)
	ret0, _ := ret[0].(*types0.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterFinalityProvider indicates an expected call of RegisterFinalityProvider.
func (mr *MockClientControllerMockRecorder) RegisterFinalityProvider(chainID, fpPk, pop, commission, description any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterFinalityProvider", reflect.TypeOf((*MockClientController)(nil).RegisterFinalityProvider), chainID, fpPk, pop, commission, description)
}

// Start mocks base method.
func (m *MockClientController) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockClientControllerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockClientController)(nil).Start))
}

// MockConsumerController is a mock of ConsumerController interface.
type MockConsumerController struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerControllerMockRecorder
	isgomock struct{}
}

// MockConsumerControllerMockRecorder is the mock recorder for MockConsumerController.
type MockConsumerControllerMockRecorder struct {
	mock *MockConsumerController
}

// NewMockConsumerController creates a new mock instance.
func NewMockConsumerController(ctrl *gomock.Controller) *MockConsumerController {
	mock := &MockConsumerController{ctrl: ctrl}
	mock.recorder = &MockConsumerControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumerController) EXPECT() *MockConsumerControllerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConsumerController) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConsumerControllerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConsumerController)(nil).Close))
}

// CommitPubRandList mocks base method.
func (m *MockConsumerController) CommitPubRandList(ctx context.Context, req *api.CommitPubRandListRequest) (*types0.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitPubRandList", ctx, req)
	ret0, _ := ret[0].(*types0.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitPubRandList indicates an expected call of CommitPubRandList.
func (mr *MockConsumerControllerMockRecorder) CommitPubRandList(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitPubRandList", reflect.TypeOf((*MockConsumerController)(nil).CommitPubRandList), ctx, req)
}

// GetFpFinVoteContext mocks base method.
func (m *MockConsumerController) GetFpFinVoteContext() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFpFinVoteContext")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFpFinVoteContext indicates an expected call of GetFpFinVoteContext.
func (mr *MockConsumerControllerMockRecorder) GetFpFinVoteContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFpFinVoteContext", reflect.TypeOf((*MockConsumerController)(nil).GetFpFinVoteContext))
}

// GetFpRandCommitContext mocks base method.
func (m *MockConsumerController) GetFpRandCommitContext() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFpRandCommitContext")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFpRandCommitContext indicates an expected call of GetFpRandCommitContext.
func (mr *MockConsumerControllerMockRecorder) GetFpRandCommitContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFpRandCommitContext", reflect.TypeOf((*MockConsumerController)(nil).GetFpRandCommitContext))
}

// QueryBlock mocks base method.
func (m *MockConsumerController) QueryBlock(ctx context.Context, height uint64) (types0.BlockDescription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBlock", ctx, height)
	ret0, _ := ret[0].(types0.BlockDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBlock indicates an expected call of QueryBlock.
func (mr *MockConsumerControllerMockRecorder) QueryBlock(ctx, height any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBlock", reflect.TypeOf((*MockConsumerController)(nil).QueryBlock), ctx, height)
}

// QueryBlocks mocks base method.
func (m *MockConsumerController) QueryBlocks(ctx context.Context, req *api.QueryBlocksRequest) ([]types0.BlockDescription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBlocks", ctx, req)
	ret0, _ := ret[0].([]types0.BlockDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBlocks indicates an expected call of QueryBlocks.
func (mr *MockConsumerControllerMockRecorder) QueryBlocks(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBlocks", reflect.TypeOf((*MockConsumerController)(nil).QueryBlocks), ctx, req)
}

// QueryFinalityActivationBlockHeight mocks base method.
func (m *MockConsumerController) QueryFinalityActivationBlockHeight(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryFinalityActivationBlockHeight", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFinalityActivationBlockHeight indicates an expected call of QueryFinalityActivationBlockHeight.
func (mr *MockConsumerControllerMockRecorder) QueryFinalityActivationBlockHeight(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFinalityActivationBlockHeight", reflect.TypeOf((*MockConsumerController)(nil).QueryFinalityActivationBlockHeight), ctx)
}

// QueryFinalityProviderHasPower mocks base method.
func (m *MockConsumerController) QueryFinalityProviderHasPower(ctx context.Context, req *api.QueryFinalityProviderHasPowerRequest) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryFinalityProviderHasPower", ctx, req)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFinalityProviderHasPower indicates an expected call of QueryFinalityProviderHasPower.
func (mr *MockConsumerControllerMockRecorder) QueryFinalityProviderHasPower(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFinalityProviderHasPower", reflect.TypeOf((*MockConsumerController)(nil).QueryFinalityProviderHasPower), ctx, req)
}

// QueryFinalityProviderHighestVotedHeight mocks base method.
func (m *MockConsumerController) QueryFinalityProviderHighestVotedHeight(ctx context.Context, fpPk *btcec.PublicKey) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryFinalityProviderHighestVotedHeight", ctx, fpPk)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFinalityProviderHighestVotedHeight indicates an expected call of QueryFinalityProviderHighestVotedHeight.
func (mr *MockConsumerControllerMockRecorder) QueryFinalityProviderHighestVotedHeight(ctx, fpPk any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFinalityProviderHighestVotedHeight", reflect.TypeOf((*MockConsumerController)(nil).QueryFinalityProviderHighestVotedHeight), ctx, fpPk)
}

// QueryFinalityProviderStatus mocks base method.
func (m *MockConsumerController) QueryFinalityProviderStatus(ctx context.Context, fpPk *btcec.PublicKey) (*api.FinalityProviderStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryFinalityProviderStatus", ctx, fpPk)
	ret0, _ := ret[0].(*api.FinalityProviderStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFinalityProviderStatus indicates an expected call of QueryFinalityProviderStatus.
func (mr *MockConsumerControllerMockRecorder) QueryFinalityProviderStatus(ctx, fpPk any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFinalityProviderStatus", reflect.TypeOf((*MockConsumerController)(nil).QueryFinalityProviderStatus), ctx, fpPk)
}

// QueryIsBlockFinalized mocks base method.
func (m *MockConsumerController) QueryIsBlockFinalized(ctx context.Context, height uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryIsBlockFinalized", ctx, height)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryIsBlockFinalized indicates an expected call of QueryIsBlockFinalized.
func (mr *MockConsumerControllerMockRecorder) QueryIsBlockFinalized(ctx, height any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryIsBlockFinalized", reflect.TypeOf((*MockConsumerController)(nil).QueryIsBlockFinalized), ctx, height)
}

// QueryLastPublicRandCommit mocks base method.
func (m *MockConsumerController) QueryLastPublicRandCommit(ctx context.Context, fpPk *btcec.PublicKey) (*types0.PubRandCommit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryLastPublicRandCommit", ctx, fpPk)
	ret0, _ := ret[0].(*types0.PubRandCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryLastPublicRandCommit indicates an expected call of QueryLastPublicRandCommit.
func (mr *MockConsumerControllerMockRecorder) QueryLastPublicRandCommit(ctx, fpPk any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryLastPublicRandCommit", reflect.TypeOf((*MockConsumerController)(nil).QueryLastPublicRandCommit), ctx, fpPk)
}

// QueryLatestBlockHeight mocks base method.
func (m *MockConsumerController) QueryLatestBlockHeight(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryLatestBlockHeight", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryLatestBlockHeight indicates an expected call of QueryLatestBlockHeight.
func (mr *MockConsumerControllerMockRecorder) QueryLatestBlockHeight(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryLatestBlockHeight", reflect.TypeOf((*MockConsumerController)(nil).QueryLatestBlockHeight), ctx)
}

// QueryLatestFinalizedBlock mocks base method.
func (m *MockConsumerController) QueryLatestFinalizedBlock(ctx context.Context) (types0.BlockDescription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryLatestFinalizedBlock", ctx)
	ret0, _ := ret[0].(types0.BlockDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryLatestFinalizedBlock indicates an expected call of QueryLatestFinalizedBlock.
func (mr *MockConsumerControllerMockRecorder) QueryLatestFinalizedBlock(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryLatestFinalizedBlock", reflect.TypeOf((*MockConsumerController)(nil).QueryLatestFinalizedBlock), ctx)
}

// SubmitBatchFinalitySigs mocks base method.
func (m *MockConsumerController) SubmitBatchFinalitySigs(ctx context.Context, req *api.SubmitBatchFinalitySigsRequest) (*types0.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitBatchFinalitySigs", ctx, req)
	ret0, _ := ret[0].(*types0.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitBatchFinalitySigs indicates an expected call of SubmitBatchFinalitySigs.
func (mr *MockConsumerControllerMockRecorder) SubmitBatchFinalitySigs(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitBatchFinalitySigs", reflect.TypeOf((*MockConsumerController)(nil).SubmitBatchFinalitySigs), ctx, req)
}

// UnjailFinalityProvider mocks base method.
func (m *MockConsumerController) UnjailFinalityProvider(ctx context.Context, fpPk *btcec.PublicKey) (*types0.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnjailFinalityProvider", ctx, fpPk)
	ret0, _ := ret[0].(*types0.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnjailFinalityProvider indicates an expected call of UnjailFinalityProvider.
func (mr *MockConsumerControllerMockRecorder) UnjailFinalityProvider(ctx, fpPk any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnjailFinalityProvider", reflect.TypeOf((*MockConsumerController)(nil).UnjailFinalityProvider), ctx, fpPk)
}

// MockRandomnessCommitter is a mock of RandomnessCommitter interface.
type MockRandomnessCommitter struct {
	ctrl     *gomock.Controller
	recorder *MockRandomnessCommitterMockRecorder
	isgomock struct{}
}

// MockRandomnessCommitterMockRecorder is the mock recorder for MockRandomnessCommitter.
type MockRandomnessCommitterMockRecorder struct {
	mock *MockRandomnessCommitter
}

// NewMockRandomnessCommitter creates a new mock instance.
func NewMockRandomnessCommitter(ctrl *gomock.Controller) *MockRandomnessCommitter {
	mock := &MockRandomnessCommitter{ctrl: ctrl}
	mock.recorder = &MockRandomnessCommitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRandomnessCommitter) EXPECT() *MockRandomnessCommitterMockRecorder {
	return m.recorder
}

// CommitPubRandList mocks base method.
func (m *MockRandomnessCommitter) CommitPubRandList(ctx context.Context, req *api.CommitPubRandListRequest) (*types0.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitPubRandList", ctx, req)
	ret0, _ := ret[0].(*types0.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitPubRandList indicates an expected call of CommitPubRandList.
func (mr *MockRandomnessCommitterMockRecorder) CommitPubRandList(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitPubRandList", reflect.TypeOf((*MockRandomnessCommitter)(nil).CommitPubRandList), ctx, req)
}

// GetFpRandCommitContext mocks base method.
func (m *MockRandomnessCommitter) GetFpRandCommitContext() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFpRandCommitContext")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFpRandCommitContext indicates an expected call of GetFpRandCommitContext.
func (mr *MockRandomnessCommitterMockRecorder) GetFpRandCommitContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFpRandCommitContext", reflect.TypeOf((*MockRandomnessCommitter)(nil).GetFpRandCommitContext))
}

// QueryLastPublicRandCommit mocks base method.
func (m *MockRandomnessCommitter) QueryLastPublicRandCommit(ctx context.Context, fpPk *btcec.PublicKey) (*types0.PubRandCommit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryLastPublicRandCommit", ctx, fpPk)
	ret0, _ := ret[0].(*types0.PubRandCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryLastPublicRandCommit indicates an expected call of QueryLastPublicRandCommit.
func (mr *MockRandomnessCommitterMockRecorder) QueryLastPublicRandCommit(ctx, fpPk any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryLastPublicRandCommit", reflect.TypeOf((*MockRandomnessCommitter)(nil).QueryLastPublicRandCommit), ctx, fpPk)
}

// MockBlockQuerier is a mock of BlockQuerier interface.
type MockBlockQuerier[T types0.BlockDescription] struct {
	ctrl     *gomock.Controller
	recorder *MockBlockQuerierMockRecorder[T]
	isgomock struct{}
}

// MockBlockQuerierMockRecorder is the mock recorder for MockBlockQuerier.
type MockBlockQuerierMockRecorder[T types0.BlockDescription] struct {
	mock *MockBlockQuerier[T]
}

// NewMockBlockQuerier creates a new mock instance.
func NewMockBlockQuerier[T types0.BlockDescription](ctrl *gomock.Controller) *MockBlockQuerier[T] {
	mock := &MockBlockQuerier[T]{ctrl: ctrl}
	mock.recorder = &MockBlockQuerierMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockQuerier[T]) EXPECT() *MockBlockQuerierMockRecorder[T] {
	return m.recorder
}

// QueryBlock mocks base method.
func (m *MockBlockQuerier[T]) QueryBlock(ctx context.Context, height uint64) (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBlock", ctx, height)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBlock indicates an expected call of QueryBlock.
func (mr *MockBlockQuerierMockRecorder[T]) QueryBlock(ctx, height any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBlock", reflect.TypeOf((*MockBlockQuerier[T])(nil).QueryBlock), ctx, height)
}

// QueryBlocks mocks base method.
func (m *MockBlockQuerier[T]) QueryBlocks(ctx context.Context, req *api.QueryBlocksRequest) ([]T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBlocks", ctx, req)
	ret0, _ := ret[0].([]T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBlocks indicates an expected call of QueryBlocks.
func (mr *MockBlockQuerierMockRecorder[T]) QueryBlocks(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBlocks", reflect.TypeOf((*MockBlockQuerier[T])(nil).QueryBlocks), ctx, req)
}

// QueryFinalityActivationBlockHeight mocks base method.
func (m *MockBlockQuerier[T]) QueryFinalityActivationBlockHeight(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryFinalityActivationBlockHeight", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFinalityActivationBlockHeight indicates an expected call of QueryFinalityActivationBlockHeight.
func (mr *MockBlockQuerierMockRecorder[T]) QueryFinalityActivationBlockHeight(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFinalityActivationBlockHeight", reflect.TypeOf((*MockBlockQuerier[T])(nil).QueryFinalityActivationBlockHeight), ctx)
}

// QueryIsBlockFinalized mocks base method.
func (m *MockBlockQuerier[T]) QueryIsBlockFinalized(ctx context.Context, height uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryIsBlockFinalized", ctx, height)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryIsBlockFinalized indicates an expected call of QueryIsBlockFinalized.
func (mr *MockBlockQuerierMockRecorder[T]) QueryIsBlockFinalized(ctx, height any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryIsBlockFinalized", reflect.TypeOf((*MockBlockQuerier[T])(nil).QueryIsBlockFinalized), ctx, height)
}

// QueryLatestBlockHeight mocks base method.
func (m *MockBlockQuerier[T]) QueryLatestBlockHeight(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryLatestBlockHeight", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryLatestBlockHeight indicates an expected call of QueryLatestBlockHeight.
func (mr *MockBlockQuerierMockRecorder[T]) QueryLatestBlockHeight(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryLatestBlockHeight", reflect.TypeOf((*MockBlockQuerier[T])(nil).QueryLatestBlockHeight), ctx)
}

// QueryLatestFinalizedBlock mocks base method.
func (m *MockBlockQuerier[T]) QueryLatestFinalizedBlock(ctx context.Context) (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryLatestFinalizedBlock", ctx)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryLatestFinalizedBlock indicates an expected call of QueryLatestFinalizedBlock.
func (mr *MockBlockQuerierMockRecorder[T]) QueryLatestFinalizedBlock(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryLatestFinalizedBlock", reflect.TypeOf((*MockBlockQuerier[T])(nil).QueryLatestFinalizedBlock), ctx)
}

// MockFinalityOperator is a mock of FinalityOperator interface.
type MockFinalityOperator struct {
	ctrl     *gomock.Controller
	recorder *MockFinalityOperatorMockRecorder
	isgomock struct{}
}

// MockFinalityOperatorMockRecorder is the mock recorder for MockFinalityOperator.
type MockFinalityOperatorMockRecorder struct {
	mock *MockFinalityOperator
}

// NewMockFinalityOperator creates a new mock instance.
func NewMockFinalityOperator(ctrl *gomock.Controller) *MockFinalityOperator {
	mock := &MockFinalityOperator{ctrl: ctrl}
	mock.recorder = &MockFinalityOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFinalityOperator) EXPECT() *MockFinalityOperatorMockRecorder {
	return m.recorder
}

// GetFpFinVoteContext mocks base method.
func (m *MockFinalityOperator) GetFpFinVoteContext() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFpFinVoteContext")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFpFinVoteContext indicates an expected call of GetFpFinVoteContext.
func (mr *MockFinalityOperatorMockRecorder) GetFpFinVoteContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFpFinVoteContext", reflect.TypeOf((*MockFinalityOperator)(nil).GetFpFinVoteContext))
}

// QueryFinalityProviderHasPower mocks base method.
func (m *MockFinalityOperator) QueryFinalityProviderHasPower(ctx context.Context, req *api.QueryFinalityProviderHasPowerRequest) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryFinalityProviderHasPower", ctx, req)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFinalityProviderHasPower indicates an expected call of QueryFinalityProviderHasPower.
func (mr *MockFinalityOperatorMockRecorder) QueryFinalityProviderHasPower(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFinalityProviderHasPower", reflect.TypeOf((*MockFinalityOperator)(nil).QueryFinalityProviderHasPower), ctx, req)
}

// QueryFinalityProviderHighestVotedHeight mocks base method.
func (m *MockFinalityOperator) QueryFinalityProviderHighestVotedHeight(ctx context.Context, fpPk *btcec.PublicKey) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryFinalityProviderHighestVotedHeight", ctx, fpPk)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFinalityProviderHighestVotedHeight indicates an expected call of QueryFinalityProviderHighestVotedHeight.
func (mr *MockFinalityOperatorMockRecorder) QueryFinalityProviderHighestVotedHeight(ctx, fpPk any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFinalityProviderHighestVotedHeight", reflect.TypeOf((*MockFinalityOperator)(nil).QueryFinalityProviderHighestVotedHeight), ctx, fpPk)
}

// QueryFinalityProviderStatus mocks base method.
func (m *MockFinalityOperator) QueryFinalityProviderStatus(ctx context.Context, fpPk *btcec.PublicKey) (*api.FinalityProviderStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryFinalityProviderStatus", ctx, fpPk)
	ret0, _ := ret[0].(*api.FinalityProviderStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFinalityProviderStatus indicates an expected call of QueryFinalityProviderStatus.
func (mr *MockFinalityOperatorMockRecorder) QueryFinalityProviderStatus(ctx, fpPk any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFinalityProviderStatus", reflect.TypeOf((*MockFinalityOperator)(nil).QueryFinalityProviderStatus), ctx, fpPk)
}

// SubmitBatchFinalitySigs mocks base method.
func (m *MockFinalityOperator) SubmitBatchFinalitySigs(ctx context.Context, req *api.SubmitBatchFinalitySigsRequest) (*types0.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitBatchFinalitySigs", ctx, req)
	ret0, _ := ret[0].(*types0.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitBatchFinalitySigs indicates an expected call of SubmitBatchFinalitySigs.
func (mr *MockFinalityOperatorMockRecorder) SubmitBatchFinalitySigs(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitBatchFinalitySigs", reflect.TypeOf((*MockFinalityOperator)(nil).SubmitBatchFinalitySigs), ctx, req)
}

// UnjailFinalityProvider mocks base method.
func (m *MockFinalityOperator) UnjailFinalityProvider(ctx context.Context, fpPk *btcec.PublicKey) (*types0.TxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnjailFinalityProvider", ctx, fpPk)
	ret0, _ := ret[0].(*types0.TxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnjailFinalityProvider indicates an expected call of UnjailFinalityProvider.
func (mr *MockFinalityOperatorMockRecorder) UnjailFinalityProvider(ctx, fpPk any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnjailFinalityProvider", reflect.TypeOf((*MockFinalityOperator)(nil).UnjailFinalityProvider), ctx, fpPk)
}
